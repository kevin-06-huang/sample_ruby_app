# Preview all emails at http://localhost:3000/rails/mailers/user_mailer
# this file is automatically generated after we set up development
# environment as per listing 10.14; after the server is restarted, this is
# generated according to the configuration
class UserMailerPreview < ActionMailer::Preview

  # Preview this email at http://localhost:3000/rails/mailers/user_mailer/account_activation
  # additionally, as per listing 10.16, we have to define user and an
  # activation_token. user must be defined because the account_activation
  # method requires a valid user objects to be passed in as argument, and
  # we manually set the user.activation_token because it is a virtual
  # attribute, ie, it is an attribute that does not have a corresponding
  # field in the database; remember what activation_token is used for, it
  # is only generated upon account creation, used to generate an
  # activation_digest, and sent to the user email; the activation_digest
  # is stored, the user is saved, and set to a default un-activated state.
  # upon activating the link in the activation email, which includes as
  # its params the activation_token and the email address (which is used
  # to look up the user), the activation_token is compared to the
  # activation_digest, and if everything matches up the user is activated
  # and the activation_token is never used again
  def account_activation
    # we simply set the user to be the first one in the database
    user = User.first
    # activation_token is set manually, because remember activation_token
    # is a virtual attribute
    user.activation_token = User.new_token
    UserMailer.account_activation(user)
  end

  # Preview this email at http://localhost:3000/rails/mailers/user_mailer/password_reset
  # likewise imported from listing 10.46, this is simply a preview
  # method 
  def password_reset
    user = User.first
    user.reset_token = User.new_token
    UserMailer.password_reset(user)
  end

end
